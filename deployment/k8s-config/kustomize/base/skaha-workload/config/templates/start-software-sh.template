#!/bin/bash

handle_error() {
    echo "$1"
    echo "Please enter Ctl+C when you are ready to exit the xterm."
    ${HOME}/.local/skaha/bin/sleep-forever.sh &
    wait
    exit 1
}

get_resource_options() {
    while read line; do
        local prefix=${line%%"="*}
        local index=$(( ${#prefix} + 2 ))
        if [[ ${line} == *"cores-default = "* ]]; then
            core_default=${line:$index}
        elif [[ ${line} == *"cores-options = "* ]]; then
            core_options=${line:$index}
        elif [[ ${line} == *"mem-gb-default = "* ]]; then
            ram_default=${line:$index}
        elif [[ ${line} == *"mem-gb-options = "* ]]; then
            ram_options=${line:$index}
        fi
    done < /desktop-config/k8s-resources.properties
}

get_cores() {
    local core_list=( ${core_options} )
    for v in "${core_list[@]}"; do
        local core_map[$v]=1
    done

    cores=${core_default}
    local c=0
    read -t 3 -p "Please enter number of cores (default ${core_default}) ${core_options}: " input_cores
    while (( c < 3 )); do
        if [[ -z "${input_cores}" ]]; then
            cores=${core_default}
            echo "${cores}"
            break
        elif [[ -n "${core_map[${input_cores}]}" ]]; then
            cores=${input_cores}
            break
        else
            read -t 3 -p "Wrong input: ${input_cores}. Please enter a number in (${core_options}) " input_cores
            c=$(( c + 1 ))
        fi
    done

    if (( c > 2 )); then
        handle_error "Failed to get the number of cores from user."
    fi
}

get_ram() {
    local ram_list=( ${ram_options} )
    for v in "${ram_list[@]}"; do
        local ram_map[$v]=1
    done

    ram=${ram_default}
    local c=0
    read -t 3 -p "Please enter the amount of memory (number of G, default ${ram_default}) ${ram_options}: " input_ram
    while (( c < 3 )); do
        if [[ -z "${input_ram}" ]]; then
            ram=${ram_default}
            echo "${ram}"
            break
        elif [[ -n "${ram_map[${input_ram}]}" ]]; then
            ram=${input_ram}
            break
        else
            read -t 3 -p "Wrong input: ${input_ram}. Please enter a number in (${ram_options}) " input_ram
            c=$(( c + 1 ))
        fi
    done

    if (( c > 2 )); then
        handle_error "Failed to get the amount of ram from user."
    fi
}

get_resources() {
    get_resource_options || handle_error "Error obtaining resource defaults or options."
    get_cores || handle_error "Error obtaining number of cores to allocate."
    get_ram || handle_error "Error obtaining amount of ram to allocate."
}

check_status() {
    sleep 1
    status=`curl -s -L -k -E ${HOME}/.ssl/cadcproxy.pem https://${skaha_hostname}/skaha/v0/session/${VNC_PW}/app/$1 | grep '"status"'`
    echo "desktop app ID is $1"
    if [[ ${status} == *"status"* ]]; then
        echo "${status}"
        IFS=': ' read -a array <<< ${status}
        count=0
        while [[ ${array[1]} == *"Pending"* ]]
        do
            sleep 1
            count=$(( $count + 1 ))
            status=`curl -s -L -k -E ${HOME}/.ssl/cadcproxy.pem https://${skaha_hostname}/skaha/v0/session/${VNC_PW}/app/$1 | grep '"status"'`
            if [[ ${status} == *"status"* ]]; then
                if test $count -eq 15 ; then
                    echo "${status}"
                    count=0
                fi
                IFS=':' read -a array <<< ${status}
            else
                handle_error "Failed to determine launch status, ${status}"
            fi
        done

        if [[ ${array[1]} == *"Running"* ]]; then
            echo "Successfully launched app."
        else
            handle_error "Failed to launch app, status is ${array[1]}."
        fi
    else
        handle_error "Failed to locate launch status, ${status}"
    fi
}

get_resources

app_id=`curl -s -L -k -E ${HOME}/.ssl/cadcproxy.pem -d "cores=${cores}" -d "ram=$ram" -d "image=(IMAGE_ID)" --data-urlencode "param=(NAME)" https://${skaha_hostname}/skaha/v0/session/${VNC_PW}/app`

check_status ${app_id}
