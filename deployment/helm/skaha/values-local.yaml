# Default values for skaha.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

skaha:
  namespace: skaha-system
skaha_workload:
  namespace: skaha-workload

deployment:
  hostname: proxy.host.name  # Change this!
  containers:
    skaha:
      # image: images-rc.canfar.net/skaha-system/skaha:0.12.0
      image: abhishek1009/skaha:latest
      imagePullPolicy: Always
      env:
        - name: skaha.hostname
          value: proxy.host.name  # Change this!
        - name: skaha.homedir
          value: /arc/home
        - name: skaha.namespace
          value: skaha-workload
        - name: skaha.maxusersessions
          value: "3"
        - name: skaha.sessionexpiry
          value: "345600"
        - name: skaha.defaultquotagb
          value: "10"
        - name: skaha.harborhosts
          value: "images.canfar.net proxy.host.name"   # Change this or remove proxy.host.name if no local harbor!
        - name: skaha.usersgroup
          value: "ivo://cadc.nrc.ca/gms?prototyping-groups/mini-src/platform-users"
        - name: CATALINA_OPTS
          value: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=0.0.0.0:5555"
        - name: JAVA_OPTS
          value: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=0.0.0.0:5555"
        - name: POSIX_DATABASE_URL
          value: jdbc:postgresql://postgres-client.skaha-system.svc.cluster.local/skaha
        - name: POSIX_DATABASE_USERNAME
          value: postgres
        - name: POSIX_DATABASE_PASSWORD
          value: postgres
      name: skaha-tomcat
      resources:
        requests:
          memory: "2000M"
          cpu: "2000m"
        limits:
          memory: "2000M"
          cpu: "2000m"
      ports:
      - containerPort: 8080
        protocol: TCP
      - containerPort: 5555
        protocol: TCP
      volumeMounts:
      - mountPath: "/config"
        name: config-volume
      - mountPath: "/config/cacerts"
        name: cacert-volume
      - mountPath: "/add-user-config"
        name: add-user-config
      - mountPath: /root/.ssl/
        name: servops-cert
        readOnly: true
      - mountPath: "/arc"
        name: cavern-volume
        subPath: cavern
      securityContext:
        runAsUser: 0
      priorityClassName: uber-user-preempt-high
      serviceAccountName: skaha
      volumes:
      - name: config-volume
        configMap:
          name: skaha-config
      - name: add-user-config
        configMap:
          name: add-user-config
      - name: servops-cert
        secret:
          defaultMode: 420
          secretName: servops-clientcert
      - name: cacert-volume
        secret:
          defaultMode: 420
          secretName: cacert-secret
      - name: cavern-volume
        persistentVolumeClaim:
          claimName: skaha-system-cavern-pvc

secrets:
  # Uncomment to enable local or self-signed CA certificates for your domain to be trusted.
  cacert-secret:
    ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURjVENDQWxtZ0F3SUJBZ0lDRUFFd0RRWUpLb1pJaHZjTkFRRUxCUUF3U1RFTE1Ba0dBMVVFQmhNQ1EwRXgKQ3pBSkJnTlZCQWdNQWtKRE1RMHdDd1lEVlFRS0RBUkRRVVJETVI0d0hBWURWUVFMREJWRFFVUkRJRWx1ZEdWeQpibUZzSUZKdmIzUWdRMEV3SGhjTk1Ua3hNREV4TWpJMU1ETTVXaGNOTWpreE1EQTRNakkxTURNNVdqQkpNUXN3CkNRWURWUVFHRXdKRFFURUxNQWtHQTFVRUNBd0NRa014RFRBTEJnTlZCQW9NQkVOQlJFTXhIakFjQmdOVkJBc00KRlVOQlJFTWdTVzUwWlhKdVlXd2dVbTl2ZENCRFFUQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQwpBUW9DZ2dFQkFNQUZhRGpHNXdmS014T0NNWU5wUHptR0ZaTUtLRWNDVXl1eCt6QW9KRzFSUDg3L2JjRS95TFRZCjhSenV1dkhxS0Q4dUtXTUEzaFgrSDVlQXMxUWFOZk1vRkwzRHR3emp1U24vTk5jY2REb1FxRmZhVmE2K2VJT3MKMU5OdEY2UEpVRm1nN3l4L0tGN2dnY3hJRlBRR2FXRmJDQTN6aTlrTDZGMzhOeEdTWXlSYjRNOUFhNzFUNDJXQwo3Y0Z0NEV1aG5KMng1aE1BTHR1ZDB6WVV5aGV6cm0yK2NUZEVhVDJzU3dMdHN0bzdYT3ZnMkt0NmFVR3pOT2lJCitzQzMwTC9QRk5lS3M0c2N4SUs1b2hZWG5RcmsxUmg2a2lKVXBzdlJQUzZBdzdQRTN2MTNQRzlHa0hPNmx0c24KMldZY20xMlltYlZRZUlTeWRBTHI3QzlsRzlHVGxjc0NBd0VBQWFOak1HRXdIUVlEVlIwT0JCWUVGSzZIZENkSwpaYlV2RW9ub1Z4TDFTODY1dWhiZU1COEdBMVVkSXdRWU1CYUFGSzZIZENkS1piVXZFb25vVnhMMVM4NjV1aGJlCk1BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0RnWURWUjBQQVFIL0JBUURBZ0dHTUEwR0NTcUdTSWIzRFFFQkN3VUEKQTRJQkFRQXVTL3Fja2dhblNBR3hhMitQQm1Uald4SVhzNmdNaUl2a0Z2OVI4N2hzNWNzWTJRa083Z3duSm9LSApzampIdStYWGxnN2lGK3RSOFFVNzB0cmF0WXpPL29haGJ1UzdUR0d6aTBHUXBUaVR1dVNhSzgzSjBEYUpxL1ZaCm5iTWxCM0F2bGtraVNsL3lJWVg3T0RPWGo4LytPdEFrSkF1ajViRmxIeHpJRG1OT2F6L0ZWekZzcThCdVYxdjMKU0ZsbU9sMnB2ZlRtMG5MQUZBMUtaUkVTNDNCdk1CV2h1ZTlZSWVWaU85SnliV3NQek93bFJLNXdDRkpGQ0JyUQpBbHd4cHZ0cm5UZkU4ZXZJYUcwazN1YXJiVzdQVGFuUDJobjBxWlRUaGx2OGpxV3c4anRpb0wyYnZYSENOcndaCjd5T3FNMlF0ZTJXZU1mdnBTNDlmZFB2RnNBMzQKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  servops-clientcert:
    cadcproxy.pem: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUQ3RENDQXRTZ0F3SUJBZ0lHQVluVjFIMlBNQTBHQ1NxR1NJYjNEUUVCQ3dVQU1FQXhDekFKQmdOVkJBWVQKQW1OaE1Rd3dDZ1lEVlFRS0V3Tm9hV0V4RFRBTEJnTlZCQXNUQkdOaFpHTXhGREFTQmdOVkJBTU1DM05sY25adgpjSE5mTkdFeU1CNFhEVEl6TURnd09ERTBOREl3TUZvWERUSXpNRGd4T0RFME5EY3dNRm93VkRFTE1Ba0dBMVVFCkJoTUNZMkV4RERBS0JnTlZCQW9UQTJocFlURU5NQXNHQTFVRUN4TUVZMkZrWXpFVU1CSUdBMVVFQXd3TGMyVnkKZG05d2MxODBZVEl4RWpBUUJnTlZCQU1UQ1RRME16YzNORGs1TVRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRApnZ0VQQURDQ0FRb0NnZ0VCQUtRby9sZ0FJa05rK1EyN0JJWmo3VjhISkhLNEFnZENRMy9SbHhjSjhCU3pqczI0CjA2YzdOZWd2V0tYd2sxWlBpanJDdkZHWHR6MjNFV2JkMGJGQk5Ka3BXWDZOeUtIeXhWYzI3Szg2SFIvSHBHczkKclZDR1UxdW1VbWZhQXFqOFdmbFFtZUpwVFVrb3RDT0VtdEl1V0xVWU5mNndtTTNpYnRKWWJkZEpwQk10ek5HbgpFOTE0Uy9DSi9XUUJTRVdpLzVCT1BXK08wNDJ2djAvWTJGVHNyQWNxTXRuOXVsblRrUU5vNngva0tQNzNiQk1MCkF2dDRqdmgwcXNOTUxSeFRpdDFWdU91OTM5ZnZhRjZmOU45Zk42RkFiblpCMXJNcmFDeTlLaDlEUnY3QzliMngKdEE3dXZiM051MWJVcVNRKy9lYWZORGFLRlI1K0pyV0dmU1QyUVc4Q0F3RUFBYU9CMXpDQjFEQU9CZ05WSFE4QgpBZjhFQkFNQ0JhQXdkZ1lEVlIwakJHOHdiWUFVWWVYQVZDUHJNeTM4ZEdNaExqTkVqdDQ1aVNxaFRhUkxNRWt4CkN6QUpCZ05WQkFZVEFtTmhNUXN3Q1FZRFZRUUlFd0ppWXpFTk1Bc0dBMVVFQ2hNRVkyRmtZekVlTUJ3R0ExVUUKQ3hNVlkyRmtZeUJwYm5SbGNtNWhiQ0J5YjI5MElHTmhnZ1lCaHVFU1ZuQXdIUVlEVlIwT0JCWUVGRWdORysxZApwZTNraG9YNXJUV2VHT0dDS1B5bk1Bd0dBMVVkRXdFQi93UUNNQUF3SFFZSUt3WUJCUVVIQVE0QkFmOEVEakFNCk1Bb0dDQ3NHQVFVRkJ4VUJNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUNSMXE5cGVFTndSOXlRcVlwckxnYkIKbDdabWdzYVZnVjNjTEpqMzE2aTVGM2FvVWFpWE5MREh4dDB4clpTajhDQTMxeVVES1ltSVlIc1lld3dqbEowVAp2VU40Q2RwT2VEY3NDVjc2bEVONWdvbzlZakp3ZFl5RUxha280dnl6Y2Z6T3dWVWtldVI0QW5aUVdiT1FSeFhSCm5Tb1RRdFpiMXBDaEdQNHo1YlRRSFN5WWxJWlJiL3dIUjNSaTBXRThJdjI0UWpXZXlocElZVkpVdmVqOGNOcDAKOW1ZM2YxRTdhOGhHUStBOGRudm10aUplNjVnYkc3V2tBVnU3eUNVZ3ZKSDRMZlFJeWxoYzdtTGI5ckcxbDB2QwoySEh3aS9ZTHpQSkY3YTErK3h2UlEvRVcvVHhVQXowbkNnN2QxaVpvS1B6WHBtR3gzWUUvQktOaXB3dk9QTWU2Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBcENqK1dBQWlRMlQ1RGJzRWhtUHRYd2NrY3JnQ0IwSkRmOUdYRndud0ZMT096YmpUCnB6czE2QzlZcGZDVFZrK0tPc0s4VVplM1BiY1JadDNSc1VFMG1TbFpmbzNJb2ZMRlZ6YnNyem9kSDhla2F6MnQKVUlaVFc2WlNaOW9DcVB4WitWQ1o0bWxOU1NpMEk0U2EwaTVZdFJnMS9yQ1l6ZUp1MGxodDEwbWtFeTNNMGFjVAozWGhMOEluOVpBRklSYUwva0U0OWI0N1RqYSsvVDlqWVZPeXNCeW95MmYyNldkT1JBMmpySCtRby92ZHNFd3NDCiszaU8rSFNxdzB3dEhGT0szVlc0NjczZjErOW9YcC8wMzE4M29VQnVka0hXc3l0b0xMMHFIME5HL3NMMXZiRzAKRHU2OXZjMjdWdFNwSkQ3OTVwODBOb29WSG40bXRZWjlKUFpCYndJREFRQUJBb0lCQVFDaWUxeTc5MjN5Yk9mQgorbURSTCtrTHpNTDd0VHQwdWRhYmxmVEpQZkhlVzVjMThnRzBIWHdPMDRZWHdOWGtjUmZ0YnovOE5vR05XVHlsCkoxcmM2aUJJbE0vYTNqVStiazk3TW9iMExUNFViWU5GRGlnVWNzL2cvKy9Da050ZkxWOVUwTDF2aHpDUy8vSEUKMGdSM2twNEVxUEVRcFBTcG03eDdBRUcvL0VpbEhXOXlKOUtUcndKRDFqTEpPOU4rcnJVMytrZER0TUxCbThTZwpZWStWbi9mMGRLVG8vTTlCNVVnV0FtL2plZHM4K0dsbXdiSDJpdkdvZVRjM3FmRlJKOE4wUEJuWnIzck9nNmtVCkxNUWFIc0MvaDlDZWs4b3VtTzd6N3dvVXVkK1dXN3lZcWhxdk1FZy9aVmRPNHBZdmd5RzZsSDRwbUE5RENqTUkKWURiVTg1VEJBb0dCQU9yWk83STQxNHZoZFl5VFlTMzQ2bEcrdjNXMS9pbEVoK29tL1RRdHo2NVRtMVNTajZYeAp3bzRCVXFEaDRkV2d6b1d2d0hyMEljcUFWUStkTEdGeWVya1JjMW9UVHNFVEE3VTVLUyt0SkQ5UUxVcjQ1b1lvCmxBTmRyYXdqWTY4Y3FlcHpaVHJsRVU2Vkw2aVhLYkE2bHY2YkViWk0yYlRPVy8yTzZjWm5EbGpoQW9HQkFMTHgKOEN6d1pDZkNPeVpabUc2R1VQenhwaVdMd3ZFMklwcEJ4NVREdHEzQU0wNmpiTVM4S0Rtd3NoRnZwVXVKMzN3cApobm4yVjNFSHA5SnR0TExPeTByV01zVGRRR0VoV01TVUwwVVJncHVvcG05RC9QeEYvUC9JTG9ZUU9OQzdiYXA1CjVTZlEvVFhDOGNqT05SSzlEQnFwVzJoSkZYS1Z5TGRWbWtRalAxUlBBb0dCQUtrUFhLUDl1MTBkSG92bUJJMGQKcFVEWGVlaDQ3TkEwWDBzMmFneEg5anRlUUhGdldDMXpqa1MvdXdYSjFkTDlnZTVIQ043NkkrRXM1UTdxYkdweQpDTnAxTDM3bWEwa2VNUXNpYlAyL1BGcS9rdnRubGp0NXRxTjlxbXBDeDUzbG1vUUdNaGRsazBIb3IzaEQ2V1ROCnFLajhaSkhCWE8rRnBqOHZ4Q1pwUmJEQkFvR0FNeWJ4endiUXVvVE5QOE13emJkYmcxTFllYmNmL0svSzZHbVIKVWJjNGl5WjhCQ2kzT08zSVdlVm1vWkZXb09kQ21VMk5nV09uejBtdThYb213MDVWMG9pMGJvNElqenRuRXBxQgpnSzdtdFBSYXowZVNFOU0xNVRBbURIQ3FyUkJHNHdxQk5RYUt1MG1Fc0RBeC82OUd2SUJZL3RDVmJ2SGVOSG9sCjVRQm1aQVVDZ1lBU0JRRk1IS0Q3Mk5yVytWTmkwUW5lWjl6RlFMMTdxcER3THlFYjdubjRNWS9XNUhnRlRQQ1EKN2JzN1lqL2xUbVFRUHQweml4OXdCa0U0YVVSWWR1enljUFNZVnhUL3NuektJRC9mVG10dW0yWFZFOEFSMUErVwpMUzdlRzROcHlUMWwrd0l4djIzV3VBeEI4VWg1SktrbHdBbFBwMVlBM0RpUDBNUnNySGYzNnc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJRGZ6Q0NBbWVnQXdJQkFnSUdBWWJoRWxad01BMEdDU3FHU0liM0RRRUJDd1VBTUVreEN6QUpCZ05WQkFZVApBbU5oTVFzd0NRWURWUVFJRXdKaVl6RU5NQXNHQTFVRUNoTUVZMkZrWXpFZU1Cd0dBMVVFQ3hNVlkyRmtZeUJwCmJuUmxjbTVoYkNCeWIyOTBJR05oTUI0WERUSXpNRE14TkRFMk5UY3dNRm9YRFRJME1ETXhNekUzTURJd01Gb3cKUURFTE1Ba0dBMVVFQmhNQ1kyRXhEREFLQmdOVkJBb1RBMmhwWVRFTk1Bc0dBMVVFQ3hNRVkyRmtZekVVTUJJRwpBMVVFQXd3TGMyVnlkbTl3YzE4MFlUSXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCCkFRQ3lYMjlkcnU1L01EMnpwY3FDMEY0RFZSV0VVNk9iRnFoVUo1RWMyd1dsdFBwYXBkV1FxNys2NkhabS9DMnQKUzd6WURTSkZQajNZNUdBOFdSampMaU9uNDhhTkN1Uk55NHZsTHZkcTVUcjg4a0pCR2c3Y1piOTJxQmx3OHFoLwpGQVhhcmkzZVJsMVRLWmowVTVCOGJ5c1I0RnVUcnI4THp2cXcrUTZLbnRJa0xSdkhiVXBVTGxoczlOSUlGUTVXCjBLMFA0L2wxemFVK1lmbWVIUzA4Nys2NTAvVm5QS1c4RmRZeU50bmE3RTdUa0swQldoV2hpNmptK3RHdFB4RjUKM0R4cGxsN1VlN2hKWFAvdDVyU05jWjVnVEw0MTdScjFuVHRvbXg5ZUszVnFySVUzUkNaZXJCYVhIN2p4dXhBRgpSeGJ1bVdkdWU5OHlxNEZ4YUZaT3R4bUJBZ01CQUFHamRqQjBNSElHQTFVZEl3UnJNR21BRks2SGRDZEtaYlV2CkVvbm9WeEwxUzg2NXVoYmVvVTJrU3pCSk1Rc3dDUVlEVlFRR0V3SkRRVEVMTUFrR0ExVUVDQXdDUWtNeERUQUwKQmdOVkJBb01CRU5CUkVNeEhqQWNCZ05WQkFzTUZVTkJSRU1nU1c1MFpYSnVZV3dnVW05dmRDQkRRWUlDRUFFdwpEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQzZIamh3Mm5NK2RCMUlVYjhMcXVxcnNtTDg2Um41L3N4bTJSNjRPClZ6NDNxby9oM3FReWYwalFNN2kzK1Z6S2JPNGdKWmU0RktiUDdFbnowUWtGZXF2RW01YzI0R1JIZE1acmdKSksKdE1RUC9uTUJ0QmRTa0RWbytSQlNwRUVXWXZUNGxKNEFwQ0NaOTRxMGZmbW5QUDg1MVl5Tnk5YTNoTXY4aUorQQpCQk12MnZ3SEt2UWU4TWtxWXpvRmMraDZHZEw1dDdGMVhqYmpwWldtb0N2bTN6d1JNZmwxbmI2SEt0cUJOYXcvCmFrbSthcWlkWlJIcmVnNUJ1Q3RoV29tNFFpQ25tOHhqWGNPeWpIRG9wL09KY0NrbmYraGdJVW0xOXlsVGwrblMKcDk3My9tNE12M2ZPbHhRN3pBcnc0ZUdxSVRxYUlEYmg3UXhWaTJLUTBJQjZ4R1E9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K

service:
  skaha_tomcat_svc:
    ports:
    - port: 8080
      name: http-connection
      protocol: TCP
    - port: 5555
      protocol: TCP
      name: java-debug

ingress:
  skahaIngress:
    http:
      paths:
      - path: /skaha
        pathType: Prefix
        backend:
          service:
            name: skaha-tomcat-svc
            port:
              number: 8080

harbor:
  expose:
    type: clusterIP
    tls:
      certSource: none
      enabled: false

  # The external URL for Harbor core service. It is used to
  # 1) populate the docker/helm commands showed on portal
  # 2) populate the token service URL returned to docker client
  #
  # Format: protocol://domain[:port]. Usually:
  # 1) if "expose.type" is "ingress", the "domain" should be
  # the value of "expose.ingress.hosts.core"
  # 2) if "expose.type" is "clusterIP", the "domain" should be
  # the value of "expose.clusterIP.name"
  # 3) if "expose.type" is "nodePort", the "domain" should be
  # the IP address of k8s node
  #
  # If Harbor is deployed behind the proxy, set it as the URL of proxy
  externalURL: https://proxy.host.name   # Change this!

  # The internal TLS used for harbor components secure communicating. In order to enable https
  # in each component tls cert files need to provided in advance.
  internalTLS:
    # If internal TLS enabled
    enabled: false

  ipFamily:
    # ipv4Enabled set to true if ipv4 is enabled in cluster, currently it affected the nginx related component
    ipv4:
      enabled: true

  # The persistence is enabled by default and a default StorageClass
  # is needed in the k8s cluster to provision volumes dynamically.
  # Specify another StorageClass in the "storageClass" or set "existingClaim"
  # if you already have existing persistent volumes to use
  #
  # For storing images and charts, you can also use "azure", "gcs", "s3",
  # "swift" or "oss". Set it in the "imageChartStorage" section
  persistence:
    enabled: true
    # Setting it to "keep" to avoid removing PVCs during a helm delete
    # operation. Leaving it empty will delete PVCs after the chart deleted
    # (this does not apply for PVCs that are created for internal database
    # and redis components, i.e. they are never deleted automatically)
    resourcePolicy: "keep"
    persistentVolumeClaim:
      registry:
        # Use the existing PVC which must be created manually before bound,
        # and specify the "subPath" if the PVC is shared with other components
        existingClaim: "skaha-system-harbor-pvc"
    # Define which storage backend is used for registry to store
    # images and charts. Refer to
    # https://github.com/docker/distribution/blob/master/docs/configuration.md#storage
    # for the detail.
    imageChartStorage:
      # Specify whether to disable `redirect` for images and chart storage, for
      # backends which not supported it (such as using minio for `s3` storage type), please disable
      # it. To disable redirects, simply set `disableredirect` to `true` instead.
      # Refer to
      # https://github.com/docker/distribution/blob/master/docs/configuration.md#redirect
      # for the detail.
      disableredirect: false
      # Specify the "caBundleSecretName" if the storage service uses a self-signed certificate.
      # The secret must contain keys named "ca.crt" which will be injected into the trust store
      # of registry's containers.
      # caBundleSecretName:

      # Specify the type of storage: "filesystem", "azure", "gcs", "s3", "swift",
      # "oss" and fill the information needed in the corresponding section. The type
      # must be "filesystem" if you want to use persistent volumes for registry
      type: filesystem
      filesystem:
        rootdirectory: /data/harbor
        #maxthreads: 100

  imagePullPolicy: IfNotPresent

  # Use this set to assign a list of default pullSecrets
  imagePullSecrets:
  #  - name: docker-registry-secret
  #  - name: internal-registry-secret

  # The update strategy for deployments with persistent volumes(jobservice, registry): "RollingUpdate" or "Recreate"
  # Set it as "Recreate" when "RWM" for volumes isn't supported
  updateStrategy:
    type: RollingUpdate

  # debug, info, warning, error or fatal
  logLevel: info

  # The initial password of Harbor admin. Change it from portal after launching Harbor
  # or give an existing secret for it
  # key in secret is given via (default to HARBOR_ADMIN_PASSWORD)
  # existingSecretAdminPassword:
  existingSecretAdminPasswordKey: HARBOR_ADMIN_PASSWORD
  harborAdminPassword: "cadc-ccda"

  # # The name of the secret which contains key named "ca.crt". Setting this enables the
  # # download link on portal to download the CA certificate when the certificate isn't
  # # generated automatically
  # caSecretName: ""

  # # The secret key used for encryption. Must be a string of 16 chars.
  # secretKey: "not-a-secure-key"
  # # If using existingSecretSecretKey, the key must be secretKey
  # existingSecretSecretKey: ""


  # Run the migration job via helm hook
  enableMigrateHelmHook: false
